name: CI

on:
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'docs/**/*'
      - '.readthedocs.yaml'
  push:
    paths-ignore:
      - '**/*.md'
      - 'docs/**/*'
      - '.readthedocs.yaml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v13
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: cachix/cachix-action@v10
        with:
          name: tezos-checker
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build dependencies
        run: nix-shell --run ':'
      - name: Check formatting
        run: nix-shell --run 'make indent && if [ -n "$(git status --porcelain)" ]; then echo "Some files require formatting, run \"make indent\"."; exit 1; fi'
      - name: Build and test
        run: nix-build -A michelson --arg doCheck true

      - name: Export lazy entrypoint sizes
        run: |
          cat result/functions.json \
            | jq --sort-keys '.lazy_functions | map({ key: .name, value: .chunks|add|length|(./2) }) | from_entries' \
            | tee entrypoint-sizes.json
      - uses: actions/upload-artifact@v2.2.4
        if: github.event_name == 'push'
        with:
          name: stats
          path: entrypoint-sizes.json
          if-no-files-found: error
      - name: Export the test coverage report
        run: nix-shell --run 'make test-coverage.json'
      - uses: actions/upload-artifact@v2.2.4
        if: github.event_name == 'push'
        with:
          name: stats
          path: test-coverage.json
          if-no-files-found: error
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v13
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: cachix/cachix-action@v10
        with:
          name: tezos-checker
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build dependencies
        run: nix-shell --run ':'
      - name: Build checker with e2eTestsHack
        run: nix-build -A michelson --arg doCheck false --arg e2eTestsHack true --out-link ./checker-e2eTestsHack
      - name: Run e2e tests
        run: nix-shell --run "WRITE_GAS_PROFILES=$PWD/gas_profiles.json WRITE_GAS_COSTS=$PWD/gas-costs.json CHECKER_DIR=$PWD/checker-e2eTestsHack python e2e/main.py"
      - name: Generate profile plots
        run: nix-shell --run "python e2e/plot-gas-profiles.py gas_profiles.json --output auction-gas-profiles.png"
      - uses: actions/upload-artifact@v2.2.4
        # we only upload artifacts on 'push' events, this is simply to have one set of artifacts
        # per commit.
        if: github.event_name == 'push'
        with:
          name: stats
          path: gas-costs.json
          if-no-files-found: error
      - uses: actions/upload-artifact@v2.2.4
        if: github.event_name == 'push'
        with:
          name: gas-profile-plots
          path: auction-gas-profiles.png
          if-no-files-found: error
  comment:
    needs: [ build, e2e ]
    runs-on: ubuntu-latest

    # only run one instance at a time
    concurrency: bot-mutex

    steps:
      - uses: cachix/install-nix-action@v13
      - uses: cachix/cachix-action@v10
        with:
          name: tezos-checker
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - uses: actions/checkout@v2
      # we don't have a "Build dependencies" step because we don't want this to
      # take time when there's nothing to compare.
      # - name: Build dependencies
      #   run: nix-shell --run ':'
      - uses: actions/github-script@v4.0.2
        with:
          script: |
            const util = require('util');
            const execFile = util.promisify(require('child_process').execFile);

            const prs = github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });

            console.log(prs);

            async function testsPassed(ref) {
              const res = await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}/status', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: ref
              });
              return res.state === "success";
            }

            async function commentExists(issue_number, marker) {
              const cs = await github.issues.listComments({
                owner,
                repo,
                issue_number,
              })

              return cs.find(comment =>
                comment.body.includes(marker)
              );
            }

            for (const pr in prs) {
              console.log("Processing PR", pr.id);

              const base = pr.base.sha;
              const head = pr.head.sha;

              // skip if the tests are pending or failed
              if(!(await (testsPassed(base))) || !(await (testsPassed(head)))) {
                console.log("Tests not successful, skipping.");
                return;
              }

              // we append a hidden marker to the body, so the bot can recognize
              // if it already has posted a message.
              const marker = "bot:" + base + ":" + head;

              // only run the job if there is no existing comment
              if(await (commentExists(pr.id, marker))) {
                console.log("Comment exists, skipping.");
              } else {
                const ret = await (execFile(
                  "nix-shell",
                  [ "--run"
                  , "./scripts/artifacts.py compare-stats --previous " + pr.base.sha + " --next " + pr.head.sha
                  ]
                ));
                console.log(ret);

                github.issues.createComment({
                  issue_number: pr.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: ret.stdout + "\n\n[hiddencomment]: " + marker
                });
              }
            }
